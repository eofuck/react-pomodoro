{"version":3,"sources":["SettingsContext.js","BackButton.js","Settings.js","PauseButton.js","PlayButton.js","SettingsButton.js","Timer.js","App.js","index.js"],"names":["SettingsContext","React","createContext","BackButton","props","className","xmlns","class","viewBox","fill","d","Settings","settingsInfo","useContext","style","textAlign","workMinutes","ReactSlider","thumbClassName","trackClassName","value","onChange","newValue","setWorkMinutes","min","max","breakMinutes","setBreakMinutes","marginTop","type","checked","manual","setManual","onClick","setShowSettings","PauseButton","PlayButton","SettingsButton","Timer","useState","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","useRef","isPausedRef","modeRef","manualRef","useEffect","current","interval","setInterval","nextMode","nextSeconds","switchMode","console","log","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","text","styles","buildStyles","textColor","pathColor","trailColor","App","showSettings","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0007ee05.chunk.js","sourcesContent":["import React from 'react';\n\nconst SettingsContext = React.createContext({});\n\nexport default SettingsContext;\n","function BackButton(props) {\n  return (\n    <button {...props} className={'with-text'}>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        class='h-5 w-5'\n        viewBox='0 0 20 20'\n        fill='currentColor'\n      >\n        <path\n          fill-rule='evenodd'\n          d='M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z'\n          clip-rule='evenodd'\n        />\n      </svg>\n      Back\n    </button>\n  );\n}\n\nexport default BackButton;\n","import ReactSlider from 'react-slider';\nimport SettingsContext from './SettingsContext';\nimport './slider.css';\nimport { useContext, useState } from 'react';\nimport BackButton from './BackButton';\n\nfunction Settings() {\n  //passes  SettingsContext values into settingsInfo\n  const settingsInfo = useContext(SettingsContext);\n\n  return (\n    <div style={{ textAlign: 'left' }}>\n      <label>work: {settingsInfo.workMinutes}:00</label>\n      <ReactSlider\n        className={'slider'}\n        thumbClassName={'thumb'}\n        trackClassName={'track'}\n        value={settingsInfo.workMinutes}\n        //updates WorkMinutes when you move slider\n        onChange={(newValue) => settingsInfo.setWorkMinutes(newValue)}\n        min={1}\n        max={120}\n      />\n      <label>break: {settingsInfo.breakMinutes}:00</label>\n      <ReactSlider\n        className={'slider green'}\n        thumbClassName={'thumb'}\n        trackClassName={'track'}\n        value={settingsInfo.breakMinutes}\n        //updates BreakMinutes when you move slider\n        onChange={(newValue) => settingsInfo.setBreakMinutes(newValue)}\n        min={1}\n        max={120}\n      />\n      <label style={{ marginTop: '20px' }}>\n        Do you want to manually start pomodoros and breaks?\n        <input\n          type='checkbox'\n          checked={settingsInfo.manual}\n          onChange={() => settingsInfo.setManual(true)}\n        />\n      </label>\n      <div style={{ textAlign: 'center', marginTop: '20px' }}>\n        <BackButton onClick={() => settingsInfo.setShowSettings(false)} />\n      </div>\n    </div>\n  );\n}\n\nexport default Settings;\n","\n\nfunction PauseButton(props) {\n  return (\n    <button {...props}>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        class='h-5 w-5'\n        viewBox='0 0 20 20'\n        fill='currentColor'\n      >\n        <path\n          fill-rule='evenodd'\n          d='M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z'\n          clip-rule='evenodd'\n        />\n      </svg>\n    </button>\n  );\n}\n\nexport default PauseButton;\n","function PlayButton(props) {\n  return (\n    <button {...props}>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        class='h-5 w-5'\n        viewBox='0 0 20 20'\n        fill='currentColor'\n      >\n        <path\n          fill-rule='evenodd'\n          d='M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z'\n          clip-rule='evenodd'\n        />\n      </svg>\n    </button>\n  );\n}\n\nexport default PlayButton;\n","//replace with-text with settings both here and in App.css\n\nfunction SettingsButton(props) {\n  return (\n    <button {...props} className={'with-text'}>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        class='h-5 w-5'\n        viewBox='0 0 20 20'\n        fill='currentColor'\n      >\n        <path\n          fill-rule='evenodd'\n          d='M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z'\n          clip-rule='evenodd'\n        />\n      </svg>\n      Settings\n    </button>\n  );\n}\n\nexport default SettingsButton;\n","import { buildStyles, CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PauseButton from './PauseButton';\nimport PlayButton from './PlayButton';\nimport SettingsButton from './SettingsButton';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from './SettingsContext';\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  const settingsInfo = useContext(SettingsContext);\n\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); //work/break/pause\n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  const secondsLeftRef = useRef(secondsLeft); //sets default value\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n  const manualRef = useRef(settingsInfo.manual);\n\n  //switches study mode\n  function switchMode() {\n    //try with (!mode)\n    const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n    const nextSeconds =\n      (nextMode === 'work'\n        ? settingsInfo.workMinutes\n        : settingsInfo.breakMinutes) * 60;\n    /*\n    nextMode === 'work'\n        ? settingsInfo.workMinutes * 60\n        : settingsInfo.breakMinutes * 60\n    );\n    */\n    setMode(nextMode);\n    modeRef.current = nextMode;\n\n    //replace code in setSecondsLeft with nextSeconds\n    setSecondsLeft(nextSeconds);\n    secondsLeftRef.current = nextSeconds;\n  }\n\n  function tick() {\n    secondsLeftRef.current--; //-=1\n    //secondsLeft - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  function initTimer() {\n    //equation equals to all of the seconds\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  //makes initTimer run everytime settingsInfo ins changed\n  useEffect(() => {\n    initTimer();\n\n    //when this component mounts this runs\n    const interval = setInterval(() => {\n      //if paused do nothing\n      if (isPausedRef.current) {\n        //isPaused\n        console.log(1);\n        return;\n      }\n      //if time runs out switches modes\n      //without Ref even if state would change\n      //it still wouldn't refreshed inside here\n      if (secondsLeftRef.current === 0) {\n        //if user chose that he wants to manulay click\n        //and start next mode (manual==true), timer won't\n        //do anything when time runs out, it just pauses\n        if (manualRef.current) {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n        return switchMode();\n      }\n\n      //if not paused or time didn't run out\n      tick();\n      //lower this number for speeding timer up\n    }, 100); //milliseconds\n\n    //when it onmounts this runs\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n\n  const totalSeconds =\n    mode === 'work'\n      ? settingsInfo.workMinutes * 60\n      : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100);\n\n  const minutes = Math.floor(secondsLeft / 60); //21.7 > 21\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) {\n    seconds = '0' + seconds; //:07\n  }\n  return (\n    <div>\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + ':' + seconds}\n        styles={buildStyles({\n          //rotation,\n          //strokeLinecap,\n          textColor: '#fff',\n          pathColor: mode === 'work' ? red : green,\n          trailColor: 'rgba(255,255,255,.2)',\n        })}\n      />\n      <div>\n        {isPaused ? (\n          <PlayButton\n            onClick={() => {\n              setIsPaused(false);\n              isPausedRef.current = false;\n            }}\n          />\n        ) : (\n          <PauseButton\n            onClick={() => {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }}\n          />\n        )}\n      </div>\n      <div>\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n","import { useState } from 'react';\nimport './App.css';\nimport Settings from './Settings';\nimport SettingsContext from './SettingsContext';\nimport Timer from './Timer';\n\nfunction App() {\n  const [showSettings, setShowSettings] = useState(false);\n  const [workMinutes, setWorkMinutes] = useState(45);\n  const [breakMinutes, setBreakMinutes] = useState(15);\n  const [manual, setManual] = useState(false);\n\n  return (\n    <main>\n      {/* sets default values for workMinutes and breakMinutes*/}\n      {/* same as as workMinutes: workMinutes, breakMinutes: breakMinutes*/}\n      {/* it not only passes values but also functionalities. eg. setWork/Breakmintes*/}\n      <SettingsContext.Provider\n        value={{\n          showSettings,\n          setShowSettings,\n          workMinutes,\n          breakMinutes,\n          setWorkMinutes,\n          setBreakMinutes,\n          manual,\n          setManual,\n        }}\n      >\n        {/* if Settings will be clicked it will render settings page otherwise \n        Timer page will be rendered */}\n        {/*values didn't get passed into Settings when this code was \n        outside SettingsContext.provider*/}\n        {showSettings ? <Settings /> : <Timer />}\n      </SettingsContext.Provider>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}